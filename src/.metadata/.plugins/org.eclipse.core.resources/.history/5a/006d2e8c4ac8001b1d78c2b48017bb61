=============================================================================
List of generated methods in project: laberinto

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "Pins1"     (component PinSettings)

Module "MCUC1"     (component McuLibConfig)
   - MCUC1_Init -Driver initialization method
   - MCUC1_Deinit -Driver deinitialization method

Module "WAIT"      (component Wait)
   - WAIT_Wait10Cycles -Wait for 10 CPU cycles.
   - WAIT_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT_WaitCycles -Wait for a specified number of CPU cycles (16bit data type).
   - WAIT_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - WAIT_Waitms -Wait for a specified time in milliseconds.
   - WAIT_Waitus -Wait for a specified time in microseconds.
   - WAIT_Waitns -Wait for a specified time in nano seconds.
   - WAIT_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.
   - WAIT_Init -Driver initialization routine.

Module "AD1"       (component ADC)
   - AD1_Measure -This method performs one measurement on all channels that are set in the component inspector. (Note: If the 
                <number of conversions> is more than one the conversion of A/D channels is performed specified number of times.)
   - AD1_MeasureChan -This method performs measurement on one channel. (Note: If the <number of conversions> is more than one 
                the conversion of the A/D channel is performed specified number of times.)
   - AD1_GetValue16 -This method returns the last measured values of all channels. Compared with <GetValue> method this method 
                returns more accurate result if the <number of conversions> is greater than 1 and <AD resolution> is less than 
                16 bits. In addition, the user code dependency on <AD resolution> is eliminated.
   - AD1_GetChanValue16 -This method returns the last measured value of the required channel. Compared with <GetChanValue> 
                method this method returns more accurate result if the <number of conversions> is greater than 1 and <AD 
                resolution> is less than 16 bits. In addition, the user code dependency on <AD resolution> is eliminated.

Module "PPG1"      (component PPG)
   - PPG1_Enable -This method enables the component - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - PPG1_Disable -This method disables the component - it stops the signal generation and events calling. When the timer is 
                disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - PPG1_SetPeriodUS -This method sets the new period of the output signal. The period is expressed in [microseconds] as a 
                16-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' is 
                selected in the <Timing dialog box> of the Runtime setting area.
   - PPG1_SetPeriodMS -This method sets the new period of the output signal. The period is expressed in [milliseconds] as a 
                16-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' is 
                selected in the <Timing dialog box> of the Runtime setting area.
   - PPG1_SetPeriodSec -This method sets the new period of the output signal. The period is expressed in [seconds] as a 16-bit 
                unsigned integer number. This method is available only if the runtime setting type 'from interval' is selected 
                in the <Timing dialog box> of the Runtime setting area.
   - PPG1_SetPeriodReal -This method sets the new period of the output signal. The period is expressed in [seconds] as a real 
                number. To use this method the compiler have to support floating point operations. This method is available 
                only if the runtime setting type 'from interval' is selected in the <Timing dialog box> of the Runtime setting 
                area.
   - PPG1_SetFreqHz -This method sets the new frequency of the output signal. The frequency is expressed in [Hz] as a 16-bit 
                unsigned integer number. This method is available only if the runtime setting type 'from interval' is selected 
                in the <Timing dialog box> of the Runtime setting area.
   - PPG1_SetFreqkHz -This method sets the new frequency of the output signal. The frequency is expressed in [kHz] as a 16-bit 
                unsigned integer number. This method is available only if the runtime setting type 'from interval' is selected 
                in the <Timing dialog box> of the Runtime setting area.
   - PPG1_SetFreqMHz -This method sets the new frequency of the output signal. The frequency is expressed in [MHz] as a 16-bit 
                unsigned integer number. This method is available only if the runtime setting type 'from interval' is selected 
                in the <Timing dialog box> of the Runtime setting area.
   - PPG1_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. Value 0 
                - 65535 value is proportional to ratio 0 - 100%.   Note: Calculated duty depends on the timer possibilities and 
                on the selected period.  The method is available only if method <SetPeriodMode> is not selected.
   - PPG1_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 
                16-bit unsigned integer number.  The method is available only if method <SetPeriodMode> is not selected.
   - PPG1_SetDutyMS -This method sets the new duty value of the output signal. The duty is expressed in milliseconds as a 
                16-bit unsigned integer number.  The method is available only if method <SetPeriodMode> is not selected.
   - PPG1_ClrValue -This method clears (sets to "0" = "Low") timer flip-flop output signal level. It allows to the user to 
                directly set the output pin value (=flip-flop state), and can set the signal polarity. This method only works 
                when the timer is disabled (Disable) otherwise it returns the error code. <ClrValue> and <SetValue> methods are 
                used for setting the initial state.

Module "Term1"     (component Term)
   - Term1_CRLF -Send CRLF to terminal.
   - Term1_SendStr -Send string to terminal.
   - Term1_SendNum -Send number to terminal.
   - Term1_SendChar -Send char to terminal.
   - Term1_Cls -Clear the terminal window.
   - Term1_MoveTo -Move cursor to position x, y. Range of coordinates can be from 1 to the size, which depends on the used 
                terminal. Position [1,1] represents the upper left corner.
   - Term1_SetColor -Set foreground and background color. The following color constant are defined in the header file:   
                clBlack - Black color   clRed - Red color   clGreen - Green color   clYellow - Yellow color   clBlue - Blue 
                color   clMagenta - Magenta color   clCyan - Cyan color   clWhite - White color
   - Term1_ReadChar -Read char from terminal.
   - Term1_KeyPressed -Test if char was received from the terminal.

Module "Cpu"       (component MKE06Z128LK4)

===================================================================================
