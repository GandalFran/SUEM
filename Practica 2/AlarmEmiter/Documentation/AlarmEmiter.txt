=============================================================================
List of generated methods in project: AlarmEmiter

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "Pins1"     (component PinSettings)

Module "WAIT"      (component Wait)
   - WAIT_Wait10Cycles -Wait for 10 CPU cycles.
   - WAIT_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT_WaitCycles -Wait for a specified number of CPU cycles (16bit data type).
   - WAIT_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - WAIT_Waitms -Wait for a specified time in milliseconds.
   - WAIT_Waitus -Wait for a specified time in microseconds.
   - WAIT_Waitns -Wait for a specified time in nano seconds.
   - WAIT_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.
   - WAIT_Init -Driver initialization routine.

Module "MCUC1"     (component McuLibConfig)
   - MCUC1_Init -Driver initialization method
   - MCUC1_Deinit -Driver deinitialization method

Module "CAN1"      (component CAN_LDD)
   - CAN1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.
   - CAN1_SetRxIDFilterTable -Sets the receive ID filter table element specified by the parameter ElementIdx. This method is 
                available only if receiver FIFO mode is enabled.
   - CAN1_SendFrame -Sends a frame via the CAN device. This method allow to specify CAN buffer number, message ID, data to be 
                sent, frame type and whether the message will be sent after the request comes.
   - CAN1_ReadFrame -Reads a frame from the CAN device. The user is informed about CAN reception through OnFullRxBuffer event 
                or GetStateRX method.

Module "Bits_Botones" (component BitsIO)
   - Bits_Botones_GetDir -Return selected direction.
   - Bits_Botones_GetVal -Returns the value of the Input/Output component. If the direction is [input] then reads the input 
                value of the pins and returns it. If the direction is [output] then returns the last written value (see <Safe 
                mode> property for limitations).
   - Bits_Botones_GetBit -Returns the value of the specified bit/pin of the Input/Output component. If the direction is [input] 
                then it reads the input value of the pin and returns it. If the direction is [output] then it returns the last 
                written value (see <Safe mode> property for limitations).

Module "TRIGGER"   (component BitIO)
   - TRIGGER_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - TRIGGER_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - TRIGGER_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - TRIGGER_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "ECHO"      (component BitIO)
   - ECHO_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "FC321"     (component FreeCntr32)
   - FC321_Reset -This method clears the counter.
   - FC321_GetTimeUS -This method returns the time (as a 16-bit unsigned integer) in microseconds since the last resetting 
                after the last reset.
   - FC321_GetTimeMS -This method returns the time (as a 16-bit unsigned integer) in milliseconds since the last resetting 
                after the last reset.

Module "TU1"       (component TimerUnit_LDD)
   - TU1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU1_ResetCounter -Resets counter. If counter is counting up then it is set to zero. If counter is counting down then 
                counter is updated to the reload value.   The method is not available if HW doesn't allow resetting of the 
                counter.

Module "Term1"     (component Term)
   - Term1_CRLF -Send CRLF to terminal.
   - Term1_SendStr -Send string to terminal.
   - Term1_SendNum -Send number to terminal.
   - Term1_SendChar -Send char to terminal.
   - Term1_Cls -Clear the terminal window.
   - Term1_MoveTo -Move cursor to position x, y. Range of coordinates can be from 1 to the size, which depends on the used 
                terminal. Position [1,1] represents the upper left corner.
   - Term1_SetColor -Set foreground and background color. The following color constant are defined in the header file:   
                clBlack - Black color   clRed - Red color   clGreen - Green color   clYellow - Yellow color   clBlue - Blue 
                color   clMagenta - Magenta color   clCyan - Cyan color   clWhite - White color
   - Term1_ReadChar -Read char from terminal.
   - Term1_KeyPressed -Test if char was received from the terminal.

Module "Cpu"       (component MKE06Z128LK4)

===================================================================================
