=============================================================================
List of generated methods in project: AlarmReceiver

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "Pins1"     (component PinSettings)

Module "MCUC1"     (component McuLibConfig)
   - MCUC1_Init -Driver initialization method
   - MCUC1_Deinit -Driver deinitialization method

Module "WAIT1"     (component Wait)
   - WAIT1_Wait10Cycles -Wait for 10 CPU cycles.
   - WAIT1_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT1_WaitCycles -Wait for a specified number of CPU cycles (16bit data type).
   - WAIT1_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - WAIT1_Waitms -Wait for a specified time in milliseconds.
   - WAIT1_Waitus -Wait for a specified time in microseconds.
   - WAIT1_Waitns -Wait for a specified time in nano seconds.
   - WAIT1_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.
   - WAIT1_Init -Driver initialization routine.

Module "Term1"     (component Term)
   - Term1_CRLF -Send CRLF to terminal.
   - Term1_SendStr -Send string to terminal.
   - Term1_SendNum -Send number to terminal.
   - Term1_SendChar -Send char to terminal.
   - Term1_Cls -Clear the terminal window.
   - Term1_MoveTo -Move cursor to position x, y. Range of coordinates can be from 1 to the size, which depends on the used 
                terminal. Position [1,1] represents the upper left corner.
   - Term1_SetColor -Set foreground and background color. The following color constant are defined in the header file:   
                clBlack - Black color   clRed - Red color   clGreen - Green color   clYellow - Yellow color   clBlue - Blue 
                color   clMagenta - Magenta color   clCyan - Cyan color   clWhite - White color
   - Term1_ReadChar -Read char from terminal.
   - Term1_KeyPressed -Test if char was received from the terminal.

Module "PPG1"      (component PPG)
   - PPG1_Enable -This method enables the component - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - PPG1_Disable -This method disables the component - it stops the signal generation and events calling. When the timer is 
                disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - PPG1_SetPeriodUS -This method sets the new period of the output signal. The period is expressed in [microseconds] as a 
                16-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' is 
                selected in the <Timing dialog box> of the Runtime setting area.
   - PPG1_SetPeriodMS -This method sets the new period of the output signal. The period is expressed in [milliseconds] as a 
                16-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' is 
                selected in the <Timing dialog box> of the Runtime setting area.
   - PPG1_SetPeriodSec -This method sets the new period of the output signal. The period is expressed in [seconds] as a 16-bit 
                unsigned integer number. This method is available only if the runtime setting type 'from interval' is selected 
                in the <Timing dialog box> of the Runtime setting area.
   - PPG1_SetPeriodReal -This method sets the new period of the output signal. The period is expressed in [seconds] as a real 
                number. To use this method the compiler have to support floating point operations. This method is available 
                only if the runtime setting type 'from interval' is selected in the <Timing dialog box> of the Runtime setting 
                area.
   - PPG1_SetFreqHz -This method sets the new frequency of the output signal. The frequency is expressed in [Hz] as a 16-bit 
                unsigned integer number. This method is available only if the runtime setting type 'from interval' is selected 
                in the <Timing dialog box> of the Runtime setting area.
   - PPG1_SetFreqkHz -This method sets the new frequency of the output signal. The frequency is expressed in [kHz] as a 16-bit 
                unsigned integer number. This method is available only if the runtime setting type 'from interval' is selected 
                in the <Timing dialog box> of the Runtime setting area.
   - PPG1_SetFreqMHz -This method sets the new frequency of the output signal. The frequency is expressed in [MHz] as a 16-bit 
                unsigned integer number. This method is available only if the runtime setting type 'from interval' is selected 
                in the <Timing dialog box> of the Runtime setting area.
   - PPG1_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. Value 0 
                - 65535 value is proportional to ratio 0 - 100%.   Note: Calculated duty depends on the timer possibilities and 
                on the selected period.  The method is available only if method <SetPeriodMode> is not selected.
   - PPG1_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 
                16-bit unsigned integer number.  The method is available only if method <SetPeriodMode> is not selected.
   - PPG1_SetDutyMS -This method sets the new duty value of the output signal. The duty is expressed in milliseconds as a 
                16-bit unsigned integer number.  The method is available only if method <SetPeriodMode> is not selected.
   - PPG1_ClrValue -This method clears (sets to "0" = "Low") timer flip-flop output signal level. It allows to the user to 
                directly set the output pin value (=flip-flop state), and can set the signal polarity. This method only works 
                when the timer is disabled (Disable) otherwise it returns the error code. <ClrValue> and <SetValue> methods are 
                used for setting the initial state.

Module "II2C"      (component InternalI2C)
   - II2C_SendChar -When working as a MASTER, this method writes one (7-bit addressing) or two (10-bit addressing) slave 
                address bytes inclusive of R/W bit = 0 to the I2C bus and then writes one character (byte) to the bus. The 
                slave address must be specified before, by the "SelectSlave" or "SelectSlave10" method or in the component 
                initialization section, "Target slave address init" property. If interrupt service is enabled and the method 
                returns ERR_OK, it doesn't mean that transmission was successful. The state of transmission is obtainable from 
                (OnTransmitData, OnError or OnArbitLost) events.   When working as a SLAVE, this method writes a character to 
                the internal output slave buffer and, after the master starts the communication, to the I2C bus. If no 
                character is ready for a transmission (internal output slave buffer is empty), the Empty character will be sent 
                (see "Empty character" property).
   - II2C_RecvChar -When working as a MASTER, this method writes one (7-bit addressing) or two (10-bit addressing) slave 
                address bytes inclusive of R/W bit = 1 to the I2C bus, then reads one character (byte) from the bus and then 
                sends the stop condition. The slave address must be specified before, by the "SelectSlave" or "SelectSlave10" 
                method or in component initialization section, property "Target slave address init". If interrupt service is 
                enabled and the method returns ERR_OK, it doesn't mean that transmission was finished successfully. The state 
                of transmission must be tested by means of events (OnReceiveData, OnError or OnArbitLost). In case of 
                successful transmission, received data is ready after OnReceiveData event is called.   When working as a SLAVE, 
                this method reads a character from the input slave buffer.
   - II2C_SendBlock -When working as a MASTER, this method writes one (7-bit addressing) or two (10-bit addressing) slave 
                address bytes inclusive of R/W bit = 0 to the I2C bus and then writes the block of characters to the bus. The 
                slave address must be specified before, by the "SelectSlave" or "SlaveSelect10" method or in component 
                initialization section, "Target slave address init" property. If interrupt service is enabled and the method 
                returns ERR_OK, it doesn't mean that transmission was successful. The state of transmission is detectable by 
                means of events (OnTransmitData, OnError or OnArbitLost). Data to be send is not copied to an internal buffer 
                and remains in the original location. Therefore the content of the buffer should not be changed until the 
                transmission is complete. Event OnTransmitData can be used to detect the end of the transmission.  When working 
                as a SLAVE, this method writes a block of characters to the internal output slave buffer and then, after the 
                master starts the communication, to the I2C bus. If no character is ready for a transmission (internal output 
                slave buffer is empty), the "Empty character" will be sent (see "Empty character" property). In SLAVE mode the 
                data are copied to an internal buffer, if specified by "Output buffer size" property.
   - II2C_RecvBlock -When working as a MASTER, this method writes one (7-bit addressing) or two (10-bit addressing) slave 
                address bytes inclusive of R/W bit = 1 to the I2C bus, then reads the block of characters from the bus and then 
                sends the stop condition. The slave address must be specified before, by the "SelectSlave" or "SelectSlave10" 
                method or in component initialization section, "Target slave address init" property. If interrupt service is 
                enabled and the method returns ERR_OK, it doesn't mean that transmission was finished successfully. The state 
                of transmission must be tested by means of events (OnReceiveData, OnError or OnArbitLost). In case of 
                successful transmission, received data is ready after OnReceiveData event is called.   When working as a SLAVE, 
                this method reads a block of characters from the input slave buffer.
   - II2C_GetCharsInTxBuf -Returns number of characters in the output buffer. In SLAVE mode returns the number of characters in 
                the internal slave output buffer. In MASTER mode returns number of characters to be sent from the user buffer 
                (passed by SendBlock method).  This method is not supported in polling mode.
   - II2C_GetCharsInRxBuf -Returns number of characters in the input buffer. In SLAVE mode returns the number of characters in 
                the internal slave input buffer. In MASTER mode returns number of characters to be received into a user buffer 
                (passed by RecvChar or RecvBlock method).   This method is not supported in polling mode.
   - II2C_SelectSlave -This method selects a new slave for communication by its 7-bit slave address value. Any send or receive 
                method directs to or from selected device, until a new slave device is selected by this method. This method is 
                not available for the SLAVE mode.

Module "KBI0"      (component Init_KBI_VAR0)
   - KBI0_Init -This method initializes registers of the KBI module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "KBI1"      (component Init_KBI_VAR0)
   - KBI1_Init -This method initializes registers of the KBI module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "CAN1"      (component CAN_LDD)
   - CAN1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.
   - CAN1_SetRxIDFilterTable -Sets the receive ID filter table element specified by the parameter ElementIdx. This method is 
                available only if receiver FIFO mode is enabled.
   - CAN1_SendFrame -Sends a frame via the CAN device. This method allow to specify CAN buffer number, message ID, data to be 
                sent, frame type and whether the message will be sent after the request comes.
   - CAN1_ReadFrame -Reads a frame from the CAN device. The user is informed about CAN reception through OnFullRxBuffer event 
                or GetStateRX method.

Module "Cpu"       (component MKE06Z128LK4)

===================================================================================
