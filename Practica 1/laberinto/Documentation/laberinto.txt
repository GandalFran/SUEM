=============================================================================
List of generated methods in project: laberinto

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "Pins1"     (component PinSettings)

Module "MCUC1"     (component McuLibConfig)
   - MCUC1_Init -Driver initialization method
   - MCUC1_Deinit -Driver deinitialization method

Module "WAIT"      (component Wait)
   - WAIT_Wait10Cycles -Wait for 10 CPU cycles.
   - WAIT_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT_WaitCycles -Wait for a specified number of CPU cycles (16bit data type).
   - WAIT_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - WAIT_Waitms -Wait for a specified time in milliseconds.
   - WAIT_Waitus -Wait for a specified time in microseconds.
   - WAIT_Waitns -Wait for a specified time in nano seconds.
   - WAIT_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.
   - WAIT_Init -Driver initialization routine.

Module "AD1"       (component ADC)
   - AD1_Measure -This method performs one measurement on all channels that are set in the component inspector. (Note: If the 
                <number of conversions> is more than one the conversion of A/D channels is performed specified number of times.)
   - AD1_MeasureChan -This method performs measurement on one channel. (Note: If the <number of conversions> is more than one 
                the conversion of the A/D channel is performed specified number of times.)
   - AD1_GetValue16 -This method returns the last measured values of all channels. Compared with <GetValue> method this method 
                returns more accurate result if the <number of conversions> is greater than 1 and <AD resolution> is less than 
                16 bits. In addition, the user code dependency on <AD resolution> is eliminated.
   - AD1_GetChanValue16 -This method returns the last measured value of the required channel. Compared with <GetChanValue> 
                method this method returns more accurate result if the <number of conversions> is greater than 1 and <AD 
                resolution> is less than 16 bits. In addition, the user code dependency on <AD resolution> is eliminated.

Module "PPG1"      (component PPG)
   - PPG1_Enable -This method enables the component - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - PPG1_Disable -This method disables the component - it stops the signal generation and events calling. When the timer is 
                disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - PPG1_SetPeriodUS -This method sets the new period of the output signal. The period is expressed in [microseconds] as a 
                16-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' is 
                selected in the <Timing dialog box> of the Runtime setting area.
   - PPG1_SetPeriodMS -This method sets the new period of the output signal. The period is expressed in [milliseconds] as a 
                16-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' is 
                selected in the <Timing dialog box> of the Runtime setting area.
   - PPG1_SetPeriodSec -This method sets the new period of the output signal. The period is expressed in [seconds] as a 16-bit 
                unsigned integer number. This method is available only if the runtime setting type 'from interval' is selected 
                in the <Timing dialog box> of the Runtime setting area.
   - PPG1_SetPeriodReal -This method sets the new period of the output signal. The period is expressed in [seconds] as a real 
                number. To use this method the compiler have to support floating point operations. This method is available 
                only if the runtime setting type 'from interval' is selected in the <Timing dialog box> of the Runtime setting 
                area.
   - PPG1_SetFreqHz -This method sets the new frequency of the output signal. The frequency is expressed in [Hz] as a 16-bit 
                unsigned integer number. This method is available only if the runtime setting type 'from interval' is selected 
                in the <Timing dialog box> of the Runtime setting area.
   - PPG1_SetFreqkHz -This method sets the new frequency of the output signal. The frequency is expressed in [kHz] as a 16-bit 
                unsigned integer number. This method is available only if the runtime setting type 'from interval' is selected 
                in the <Timing dialog box> of the Runtime setting area.
   - PPG1_SetFreqMHz -This method sets the new frequency of the output signal. The frequency is expressed in [MHz] as a 16-bit 
                unsigned integer number. This method is available only if the runtime setting type 'from interval' is selected 
                in the <Timing dialog box> of the Runtime setting area.
   - PPG1_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. Value 0 
                - 65535 value is proportional to ratio 0 - 100%.   Note: Calculated duty depends on the timer possibilities and 
                on the selected period.  The method is available only if method <SetPeriodMode> is not selected.
   - PPG1_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 
                16-bit unsigned integer number.  The method is available only if method <SetPeriodMode> is not selected.
   - PPG1_SetDutyMS -This method sets the new duty value of the output signal. The duty is expressed in milliseconds as a 
                16-bit unsigned integer number.  The method is available only if method <SetPeriodMode> is not selected.
   - PPG1_ClrValue -This method clears (sets to "0" = "Low") timer flip-flop output signal level. It allows to the user to 
                directly set the output pin value (=flip-flop state), and can set the signal polarity. This method only works 
                when the timer is disabled (Disable) otherwise it returns the error code. <ClrValue> and <SetValue> methods are 
                used for setting the initial state.

Module "Term1"     (component Term)
   - Term1_CRLF -Send CRLF to terminal.
   - Term1_SendStr -Send string to terminal.
   - Term1_SendNum -Send number to terminal.
   - Term1_SendChar -Send char to terminal.
   - Term1_Cls -Clear the terminal window.
   - Term1_MoveTo -Move cursor to position x, y. Range of coordinates can be from 1 to the size, which depends on the used 
                terminal. Position [1,1] represents the upper left corner.
   - Term1_SetColor -Set foreground and background color. The following color constant are defined in the header file:   
                clBlack - Black color   clRed - Red color   clGreen - Green color   clYellow - Yellow color   clBlue - Blue 
                color   clMagenta - Magenta color   clCyan - Cyan color   clWhite - White color
   - Term1_ReadChar -Read char from terminal.
   - Term1_KeyPressed -Test if char was received from the terminal.

Module "Bits_RGB"  (component BitsIO)
   - Bits_RGB_GetDir -Return selected direction.
   - Bits_RGB_GetVal -Returns the value of the Input/Output component. If the direction is [input] then reads the input value 
                of the pins and returns it. If the direction is [output] then returns the last written value (see <Safe mode> 
                property for limitations).
   - Bits_RGB_PutVal -Specified value is passed to the Input/Output component. If the direction is [input] saves the value to a 
                memory or a register, this value will be written to the pins after switching to the output mode - using 
                [SetDir(TRUE)] (see <Safe mode> property for limitations). If the direction is [output] it writes the value to 
                the pins. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - Bits_RGB_GetBit -Returns the value of the specified bit/pin of the Input/Output component. If the direction is [input] 
                then it reads the input value of the pin and returns it. If the direction is [output] then it returns the last 
                written value (see <Safe mode> property for limitations).
   - Bits_RGB_PutBit -Specified value is passed to the specified bit/pin of the Input/Output component. If the direction is 
                [input] it saves the value to a memory or register, this value will be written to the pin after switching to 
                the output mode - using [SetDir(TRUE)] (see <Safe mode> property for limitations). If the direction is [output] 
                it writes the value to the pin. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - Bits_RGB_SetBit -Sets (to one) the specified bit of the Input/Output component. It is the same as [PutBit(Bit, TRUE)]. 
                (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - Bits_RGB_ClrBit -Clears (sets to zero) the specified bit of the Input/Output component. It is the same as [PutBit(Bit, 
                FALSE)]. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - Bits_RGB_NegBit -Negates (inverts) the specified bit of the Input/Output component. It is the same as [PutBit(Bit,!
                GetBit(Bit))]. (Method is available only if the Direction = _[output]_ or _[input/output]_).

Module "Bits_Botones" (component BitsIO)
   - Bits_Botones_GetDir -Return selected direction.
   - Bits_Botones_GetVal -Returns the value of the Input/Output component. If the direction is [input] then reads the input 
                value of the pins and returns it. If the direction is [output] then returns the last written value (see <Safe 
                mode> property for limitations).
   - Bits_Botones_GetBit -Returns the value of the specified bit/pin of the Input/Output component. If the direction is [input] 
                then it reads the input value of the pin and returns it. If the direction is [output] then it returns the last 
                written value (see <Safe mode> property for limitations).

Module "UTIL1"     (component Utility)
   - UTIL1_strcpy -Same as normal strcpy, but safe as it does not write beyond the buffer.
   - UTIL1_strcat -Same as normal strcat, but safe as it does not write beyond the buffer.
   - UTIL1_strcatPad -Same as normal strcat, but safe as it does not write beyond the buffer. The buffer will be filled with a 
                pad character for a given length.
   - UTIL1_chcat -Adds a single character to a zero byte terminated string buffer. It cares about buffer overflow.
   - UTIL1_Num8sToStr -Converts a signed 8bit value into a string.
   - UTIL1_Num8uToStr -Converts an unsigned 8bit value into a string.
   - UTIL1_Num16sToStr -Converts a signed 16bit value into a string.
   - UTIL1_Num16uToStr -Converts a signed 16bit value into a string.
   - UTIL1_Num32uToStr -Converts an unsigned 32bit value into a string.
   - UTIL1_Num32sToStr -Converts a signed 32bit value into a string.
   - UTIL1_NumFloatToStr -Converts a float value into a string.
   - UTIL1_Num16sToStrFormatted -Converts a 16bit signed value to string.
   - UTIL1_Num16uToStrFormatted -Converts a 16bit unsigned value to string.
   - UTIL1_Num32uToStrFormatted -Converts a 32bit unsigned value to string.
   - UTIL1_Num32sToStrFormatted -Converts a 32bit signed value to string.
   - UTIL1_strcatNum8u -Appends a 8bit unsigned value to a string buffer.
   - UTIL1_strcatNum8s -Appends a 8bit signed value to a string buffer.
   - UTIL1_strcatNum16u -Appends a 16bit unsigned value to a string buffer.
   - UTIL1_strcatNum16s -Appends a 16bit signed value to a string buffer.
   - UTIL1_strcatNum32u -Appends a 32bit signed value to a string buffer.
   - UTIL1_strcatNum32s -Appends a 32bit signed value to a string buffer.
   - UTIL1_strcatNum16uFormatted -Appends a 16bit unsigned value to a string buffer in a formatted way.
   - UTIL1_strcatNum16sFormatted -Appends a 16bit signed value to a string buffer in a formatted way.
   - UTIL1_strcatNum32uFormatted -Appends a 32bit unsigned value to a string buffer in a formatted way.
   - UTIL1_strcatNum32sFormatted -Appends a 32bit signed value to a string buffer in a formatted way.
   - UTIL1_strcatNumHex -Appends a value as hex valalue to a string buffer as hex number (without a 0x prefix), with variable 
                number of digits
   - UTIL1_strcatNum8Hex -Appends a 8bit unsigned value to a string buffer as hex number (without a 0x prefix).
   - UTIL1_strcatNum16Hex -Appends a 16bit unsigned value to a string buffer as hex number (without a 0x prefix).
   - UTIL1_strcatNum24Hex -Appends a 32bit unsigned value to a string buffer as hex number (without a 0x prefix). Only 24bits 
                are used.
   - UTIL1_strcatNum32Hex -Appends a 32bit unsigned value to a string buffer as hex number (without a 0x prefix).
   - UTIL1_strcatNum32sDotValue100 -Appends a 32bit signed value to a string buffer. The value is in 1/100 units.  For example 
                for the value -13456 it will append the string "-134.56"
   - UTIL1_strcatNumFloat -Converts a float value into a string.
   - UTIL1_IsLeapYear -Returns true if a given year is a leap year
   - UTIL1_WeekDay -Returns the weekday for a given date >= 1.Jan.1900
   - UTIL1_ReadEscapedName -Scans an escaped name from a string. This is useful e.g. for double quoted file names.
   - UTIL1_xatoi -Custom atoi() (ascii to int) implementation by Elm Chan
   - UTIL1_ScanDate -Scans a date in the format "dd.mm.yyyy" or "dd-mm-yyyy". For yy it will expand it to 20yy.
   - UTIL1_ScanTime -Scans a time string in the format "hh:mm:ss,hh" with the part for the ",hh" is optional.
   - UTIL1_ScanDecimal8uNumber -Scans a decimal 8bit unsigned number
   - UTIL1_ScanDecimal8sNumber -Scans a decimal 8bit signed number
   - UTIL1_ScanDecimal16uNumber -Scans a decimal 16bit unsigned number
   - UTIL1_ScanDecimal16sNumber -Scans a decimal 16bit signed number
   - UTIL1_ScanDecimal32uNumber -Scans a decimal 32bit unsigned number
   - UTIL1_ScanDecimal32sNumber -Scans a decimal 32bit signed number
   - UTIL1_ScanDecimal32sDotNumber -Scans a decimal 32bit signed number with a following dot (fractional part), e.g. "-34587.
                0248", it will return the (signed) integral and fractional part with number of fractional zeros. The function 
                accepts as well numbers  like "17" (no fractional part" or "17.0"
   - UTIL1_ScanHex8uNumber -Scans a hexadecimal 8bit number, starting with 0x
   - UTIL1_ScanHex8uNumberNoPrefix -Scans a hexadecimal 8bit number, without 0x
   - UTIL1_ScanHex16uNumber -Scans a hexadecimal 16bit number, starting with 0x
   - UTIL1_ScanHex32uNumber -Scans a hexadecimal 32bit number, starting with 0x
   - UTIL1_ScanSeparatedNumbers -Scans multiple numbers separated by character, e.g. "123.68.5.3"
   - UTIL1_ScanDoubleQuotedString -Scans a string inside double quotes and returns it without the double quotes.
   - UTIL1_strcmp -Wrapper to the standard strcmp() routine
   - UTIL1_strncmp -Wrapper to the standard strncmp() routine
   - UTIL1_strFind -Searches a substring inside a string and returns the position.
   - UTIL1_strtailcmp -Compares the tail of a string and returns 0 if it matches, 1 otherwise
   - UTIL1_strlen -Wrapper to the standard strlen() function.
   - UTIL1_strCutTail -Removes a tailing substring from a string. The string passed will be modified (the tail is cut by 
                writing a zero byte to the string!)
   - UTIL1_GetValue16LE -Returns a 16bit Little Endian value from memory
   - UTIL1_GetValue24LE -Returns a 24bit Little Endian value from memory
   - UTIL1_GetValue32LE -Returns a 32bit Little Endian value from memory
   - UTIL1_SetValue16LE -Stores a 16bit value in memory as Little Endian
   - UTIL1_SetValue24LE -Stores a 24bit value in memory as Little Endian
   - UTIL1_SetValue32LE -Stores a 32bit value in memory as Little Endian
   - UTIL1_map -Maps a value from one range to another
   - UTIL1_map64 -Maps a value from one range to another, using 64bit math
   - UTIL1_constrain -Makes sure that a given input value is inside a given range.
   - UTIL1_random -Provides a random value. You have to call intialize the random number generator with randomSetSeed() first!
   - UTIL1_randomSetSeed -Sets a seed for the random number generator
   - UTIL1_Deinit -Driver De-Initialization
   - UTIL1_Init -Driver Initialization

Module "TI1"       (component TimerInt)

Module "TU1"       (component TimerUnit_LDD)
   - TU1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.

Module "Cpu"       (component MKE06Z128LK4)

===================================================================================
